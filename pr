#!/usr/bin/env bash

#
# List Pull-Requests of an Azure Project
#
# USAGE
#
#     pr                                       # list completed pull requests
#     pr TYPE                                  # list pull requests of TYPE: active, all, completed, abandoned [default: all]
#     pr -v                                    # list pull requests and open in VisiData
#     pr -s COUNT                              # set number of pull requests returned [default: 100]
#
# EXAMPLES
#
#     pr | grep 1234
#     pr | rg 1234
#     pr completed | rg -f <(cat pattern-list.txt)
#

show_help() {
  awk '/^[^ #]/{c=1}c==0{print $0}' $0 | sed -n '/^#/p' | sed 1d | sed 's/^#/ /g' \
    | perl -pe "s/ #(.*)$/$(tput setaf 0)\1$(tput sgr 0)/" \
    | perl -pe "s/(USAGE|EXAMPLES|COMMANDS)/$(tput setaf 0)\1$(tput sgr 0)/" \
    | perl -pe "s/\`(.+)\`/$(tput sgr 0 1)\1$(tput sgr 0)/"
  exit 1
}

help_envs() {
  echo -e >&2 "\n environment variable $(tput setaf 1)${1}$(tput sgr0) is not set."
  echo -e "\n export variables based on this URL:\n $(tput setaf 0)https://dev.azure.com/$(tput setaf 8)<organization>$(tput setaf 0)/$(tput setaf 8)<project>$(tput setaf 0)/_git/$(tput setaf 8)<repository>$(tput sgr0)"
  echo -e "\n    $(tput setaf 0)export AZDO_ORGANIZATION=\"$(tput setaf 8)<organization>$(tput setaf 0)\"$(tput sgr0)"
  echo -e "    $(tput setaf 0)export AZDO_PROJECT=\"$(tput setaf 8)<project>$(tput setaf 0)\"$(tput sgr0)"
  echo -e "    $(tput setaf 0)export AZDO_REPOSITORY=\"$(tput setaf 8)<repository>$(tput setaf 0)\"$(tput sgr0)"
  echo -e "    $(tput setaf 0)export AZDO_REVIEWER=\"$(tput setaf 8)<your-email>$(tput setaf 0)\"$(tput sgr0)"
  exit 1
}
[ -z "$AZDO_ORGANIZATION" ] && help_envs "AZDO_ORGANIZATION"
[ -z "$AZDO_PROJECT" ] && help_envs "AZDO_PROJECT"
[ -z "$AZDO_REPOSITORY" ] && help_envs "AZDO_REPOSITORY"
[ -z "$AZDO_REVIEWER" ] && help_envs "AZDO_REVIEWER"

visidata=false
size=100
AZDO_STATUS="all"
AZDO_URL="dev.azure.com/${AZDO_ORGANIZATION}/${AZDO_PROJECT/ /%20}/_git/${AZDO_REPOSITORY}/pullrequest"

while [ $# -gt 0 ]; do
  case $1 in
    -v)
      visidata=true
      ;;
    -s)
      shift
      size=$1
      ;;
    -h|--help)
      show_help
      ;;
    *)
      AZDO_STATUS=$1
      ;;
  esac
  shift
done

echo -e >&2 "\n $(tput setaf 2)${AZDO_STATUS^}$(tput sgr0) Pull-Requests of Project $(tput setaf 2)$AZDO_PROJECT$(tput sgr0):\n"

if [[ $visidata == true ]]; then
  awk -F'\t' -v url="$AZDO_URL" 'BEGIN{printf "\"Title\",\"URL\",\"Completion Date\"\n"}{printf "\"%s\",\"%s/%s\",\"%s\"\n", $1, url, $2, substr($3, 0, 10)}' \
    < <(az repos pr list --org "https://dev.azure.com/${AZDO_ORGANIZATION}" \
                         -p "${AZDO_PROJECT}" \
                         -r "${AZDO_REPOSITORY}" \
                         --status "${AZDO_STATUS}" \
                         --top "$size" \
                         --query "[].{Title: title, PR: pullRequestId, Completion: completionQueueTime}" -o 'tsv') \
  | vd
else
  [[ $DEBUG == "1" ]] && echo -e "   $(tput setaf 0)az repos pr list --org \""https://dev.azure.com/${AZDO_ORGANIZATION}\"" -p \""${AZDO_PROJECT}\"" -r \""${AZDO_REPOSITORY}\"" --status \""${AZDO_STATUS}\"" --top "${size}" --query \""[].{Title: title, PR: pullRequestId, Creation: creationDate, Completion: completionQueueTime, Branch: sourceRefName}\"" -o 'json'$(tput sgr0)\n"

  tput rmam
  az repos pr list --org "https://dev.azure.com/${AZDO_ORGANIZATION}" \
     -p "${AZDO_PROJECT}" \
     -r "${AZDO_REPOSITORY}" \
     --status "${AZDO_STATUS}" \
     --top "$size" \
     --query "reverse(sort_by([], &creationDate))[*].{Title: title, PR: pullRequestId, Creation: creationDate, Completion: completionQueueTime, Branch: sourceRefName}" \
     -o 'json' \
     | jq --arg url "https://${AZDO_URL}/" \
          -r 'def grey: "\u001b[90m";
              def reset: "\u001b[0m";
              def az_url(id): "\u001b]8;;\($url+(id|tostring))\u001b\\\(id)\u001b]8;;\u001b\\";
              .[] |
                "\(grey)\(.Creation[:10])\t\(.Completion[:10]//"")\(reset)\t\(az_url(.PR))\t\(.Branch|sub("refs/heads/";""))\t\(.Title)"
             ' \
  | column -t -s $'\t'
  tput smam
fi

## TODO
##
##   [ ] make "completed" default
##
##   [ ] if "completed", then sort by 'completionQueueTime'
##
##   [ ] if completed and '-m' option (for minimal), output only "completionQueueTime PR-Number JIRA-ID" to gain ordered list of tickets to cherry pick
##
##
