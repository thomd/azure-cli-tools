#!/usr/bin/env bash

#
# List Pull-Requests of an Azure Project
#
# LOGIN
#
#     az devops login                            # login via personal access token (PAT)
#
# USAGE
#
#     pr                                         # list completed pull requests
#     pr TYPE                                    # list pull requests of TYPE: active, all, completed, abandoned [default: all]
#     pr -c COUNT                                # set number of pull requests returned [default: 100]
#     pr -s DIRECTION                            # set sort direction by date 'asc' | 'desc' [default: desc]
#     pr -f PATTERN                              # filter in title and branch name for PATTERN
#     pr --csv                                   # list pull requests as CSV
#
# EXAMPLES
#
#     pr --csv | vd                              # open PRs in VisiData
#     pr -f 1234                                 # print only PRs with '1234' in title or branch name
#     pr | grep --color=never 1234
#     pr | rg --color=never 1234
#     pr completed | rg -f <(cat list.txt)       # print all completed PRs referenced in 'list.txt'
#

show_help() {
  awk '/^[^ #]/{c=1}c==0{print $0}' $0 | sed -n '/^#/p' | sed 1d | sed 's/^#/ /g' \
    | perl -pe "s/ #(.*)$/$(tput setaf 0)\1$(tput sgr 0)/" \
    | perl -pe "s/(LOGIN|USAGE|EXAMPLES|COMMANDS)/$(tput setaf 0)\1$(tput sgr 0)/" \
    | perl -pe "s/\`(.+)\`/$(tput sgr 0 1)\1$(tput sgr 0)/"
  exit 1
}

help_envs() {
  echo -e >&2 "\n environment variable $(tput setaf 1)${1}$(tput sgr0) is not set."
  echo -e "\n export variables based on this URL:\n $(tput setaf 0)https://dev.azure.com/$(tput setaf 8)<organization>$(tput setaf 0)/$(tput setaf 8)<project>$(tput setaf 0)/_git/$(tput setaf 8)<repository>$(tput sgr0)"
  echo -e "\n    $(tput setaf 0)export AZDO_ORGANIZATION=\"$(tput setaf 8)<organization>$(tput setaf 0)\"$(tput sgr0)"
  echo -e "    $(tput setaf 0)export AZDO_PROJECT=\"$(tput setaf 8)<project>$(tput setaf 0)\"$(tput sgr0)"
  echo -e "    $(tput setaf 0)export AZDO_REPOSITORY=\"$(tput setaf 8)<repository>$(tput setaf 0)\"$(tput sgr0)"
  echo -e "    $(tput setaf 0)export AZDO_REVIEWER=\"$(tput setaf 8)<your-email>$(tput setaf 0)\"$(tput sgr0)"
  echo -e "    $(tput setaf 0)export JIRA_CLOUD_URL=\"$(tput setaf 8)<jira-cloud-url>$(tput setaf 0)\"$(tput sgr0)"
  exit 1
}
[ -z "$AZDO_ORGANIZATION" ] && help_envs "AZDO_ORGANIZATION"
[ -z "$AZDO_PROJECT" ] && help_envs "AZDO_PROJECT"
[ -z "$AZDO_REPOSITORY" ] && help_envs "AZDO_REPOSITORY"
[ -z "$AZDO_REVIEWER" ] && help_envs "AZDO_REVIEWER"
[ -z "$JIRA_CLOUD_URL" ] && help_envs "JIRA_CLOUD_URL"

csv=false
size=2000
pr_status="all"
sort_direction="desc"
filter=""
AZDO_URL="dev.azure.com/${AZDO_ORGANIZATION}/${AZDO_PROJECT/ /%20}/_git/${AZDO_REPOSITORY}/pullrequest"

while [ $# -gt 0 ]; do
  case $1 in
    --csv)
      csv=true
      ;;
    -c|--count)
      shift
      size=$1
      ;;
    -s|--sort)
      shift
      sort_direction=$1
      ;;
    -f|--filter)
      shift
      filter_arg=$1
      filter="?contains(title, '$filter_arg') || contains(sourceRefName, '$filter_arg')"
      ;;
    -h|--help)
      show_help
      ;;
    *)
      pr_status=$1
      ;;
  esac
  shift
done

[[ $pr_status == "completed" ]] && sort_by="completionQueueTime" || sort_by="creationDate"
[[ $sort_direction == "desc" ]] && sort_dir="reverse" || sort_dir=""

if [[ $csv == true ]]; then
  (echo "Creation Date,Completion Date,Pull Request ID,JIRA ID,Branch,Title";
   az repos pr list --org "https://dev.azure.com/${AZDO_ORGANIZATION}" \
     -p "${AZDO_PROJECT}" \
     -r "${AZDO_REPOSITORY}" \
     --status "${pr_status}" \
     --top "$size" \
     --query "${sort_dir}(sort_by([$filter], &${sort_by}))[*].{Title: title, PR: pullRequestId, Creation: creationDate, Completion: completionQueueTime, Branch: sourceRefName}" \
     -o 'json' \
     | jq -r '.[] | "\(.Creation[:10]),\(.Completion[:10]//""),\(.PR),\(.Branch|capture("(?<jira>[A-Z]+-[0-9]+)")|.jira),\(.Branch|sub("refs/heads/";"")),\"\(.Title)\""' )
else
  if [[ $filter == "" ]]; then
    echo -e >&2 "\n Project $(tput setaf 4)$AZDO_PROJECT$(tput sgr0): $(tput setaf 2)${size}$(tput sgr0) last pull-requests of status '$(tput setaf 2)${pr_status}$(tput sgr0)'\n"
  else
    echo -e >&2 "\n Project $(tput setaf 4)$AZDO_PROJECT$(tput sgr0): pull-requests of status '$(tput setaf 2)$pr_status$(tput sgr0)' containing '$(tput setaf 2)$filter_arg$(tput sgr0)'\n"
  fi
  [[ $DEBUG == "1" ]] && echo -e "$(tput setaf 0)az repos pr list --org \"https://dev.azure.com/${AZDO_ORGANIZATION}\" -p \"${AZDO_PROJECT}\" -r \"${AZDO_REPOSITORY}\" --status \"${pr_status}\" --top ${size} --query \"reverse(sort_by([], &${sort_by}))[*].{Title: title, PR: pullRequestId, Creation: creationDate, Completion: completionQueueTime, Branch: sourceRefName}\" -o 'json'$(tput sgr0)\n"
  tput rmam
  az repos pr list --org "https://dev.azure.com/${AZDO_ORGANIZATION}" \
     -p "${AZDO_PROJECT}" \
     -r "${AZDO_REPOSITORY}" \
     --status "${pr_status}" \
     --top "$size" \
     --query "${sort_dir}(sort_by([$filter], &${sort_by}))[*].{Title: title, PR: pullRequestId, Creation: creationDate, Completion: completionQueueTime, Branch: sourceRefName}" \
     -o 'json' \
     | jq \
          --arg azurl "https://${AZDO_URL}/" \
          --arg jiraurl "https://${JIRA_CLOUD_URL}/" \
          -r 'def grey: "\u001b[90m";
              def reset: "\u001b[0m";
              def az_url(id): "\u001b]8;;\($azurl+(id|tostring))\u001b\\\(id)\u001b]8;;\u001b\\";
              def jira_url(id): "\u001b]8;;\($jiraurl+"browse/"+(id|tostring))\u001b\\\(id)\u001b]8;;\u001b\\";
              .[] |
                "\(grey)\(.Creation[:10])\t\(.Completion[:10]//"")\(reset)\t\(az_url(.PR))\t\(jira_url(.Branch|capture("(?<jira>[A-Z]+-[0-9]+)")|.jira))\t\(grey)\(.Branch|sub("refs/heads/";""))\(reset)\t\(.Title)"
             ' \
  | column -t -s $'\t'
  tput smam
fi

